dir.create(file.path("testdir2", "testdir3", recursive = TRUE)
)
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
swirl()
library("swirl", lib.loc="~/R/win-library/3.2")
swirl()
library("swirl", lib.loc="~/R/win-library/3.2")
swirl()
head(flags)
dim(flags)
viewinfo()
clas(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character?(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colours <- flags[, 11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes[,19:23]
flag_shapes <- flags[,19:23]
lappy(flag_Shapes, range)
lapply(flag_Shapes, range)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique(flags[,])
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, sum)
lapply(unique_vals, lenght)
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
getwd()
fileurl <- "http://espn.go.com/nfl/team/_/name?bal/baltimore-ravens"
doc <- htmlTreeParse(fileurl, useINternal=TRUE)
library("htmltools", lib.loc="~/R/win-library/3.2")
doc <- htmlTreeParse(fileurl, useINternal=TRUE)
library("KernSmooth", lib.loc="~/R/win-library/3.2")
library("markdown", lib.loc="~/R/win-library/3.2")
library("plyr", lib.loc="~/R/win-library/3.2")
doc <- htmlTreeParse(fileurl, useINternal=TRUE)
library("RCurl", lib.loc="~/R/win-library/3.2")
doc <- htmlTreeParse(fileurl, useINternal=TRUE)
detach("package:bitops", unload=TRUE)
library("bitops", lib.loc="~/R/win-library/3.2")
detach("package:RCurl", unload=TRUE)
library("RCurl", lib.loc="~/R/win-library/3.2")
doc <- htmlTreeParse(fileurl, useInternal=TRUE)
library("xml2", lib.loc="~/R/win-library/3.2")
doc <- htmlTreeParse(fileurl, useInternal=TRUE)
library("utils", lib.loc="C:/Program Files/R/R-3.2.1/library")
library("tools", lib.loc="C:/Program Files/R/R-3.2.1/library")
library("Matrix", lib.loc="C:/Program Files/R/R-3.2.1/library")
library("datasets", lib.loc="C:/Program Files/R/R-3.2.1/library")
doc <- htmlTreeParse(fileurl, useInternal=TRUE)
library("rstudio", lib.loc="~/R/win-library/3.2")
doc <- htmlTreeParse(fileurl, useInternal=TRUE)
?htmlTreeParse
??htmlTreeParse
library("evaluate", lib.loc="~/R/win-library/3.2")
?htmlTreeParse
library("bitops", lib.loc="~/R/win-library/3.2")
library("formatR", lib.loc="~/R/win-library/3.2")
install.packages(c("randomForest", "rmarkdown"))
DT <- fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv')
library("data.table", lib.loc="~/R/win-library/3.2")
DT <- fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv')
?replicate
ot <- replicate(1000,mean(DT$pwgtp15,by=DT$SEX))
system.time(ot)
ot <- replicate(100000,mean(DT$pwgtp15,by=DT$SEX))
system.time(ot)
system.time(ot)
system.time(replicate(100000,mean(DT$pwgtp15,by=DT$SEX)))
system.time(replicate(100000,tapply(DT$pwgtp15,DT$SEX,mean)))
system.time(replicate(10000,tapply(DT$pwgtp15,DT$SEX,mean)))
system.time(replicate(10000,sapply(split(DT$pwgtp15,DT$SEX),mean))
)
system.time(replicate(10000,rowMeans(DT)[DT$SEX==2])
)
library("XML", lib.loc="~/R/win-library/3.2")
doc <- xmlTreeParse('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml', useInternal=TRUE)
doc <- xmlTreeParse('http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml', useInternal=TRUE)
xml(doc)
xmlName(doc)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1][1]]
rootNode[[1]][[1]]
xpathSApply(rootNode, //zipcode', xmlValue')
xpathSApply(rootNode, '//zipcode', xmlValue)
zips <- (xpathSApply(rootNode, '//zipcode', xmlValue)
)
zips <- as.numeric(zips)
zips
?count
zips_1 <- zips[1 == 21206,]
zips_1 <- zips[1 == 21206
]
zips_1 <- zips == 21206
Sum(zips)
sum(zips)
sum(zips_1)
zips_1 <- zips == 21231
sum(zips_1)
system.time(replicate(1000,rowMeans(DT)[DT$SEX==2])
)
system.time(replicate(1000,sapply(split(DT$pwgtp15,DT$SEX),mean))
)
system.time(replicate(1000,mean(DT$pwgtp15,by=DT$SEX))
)
system.time(replicate(1000,tapply(DT$pwgtp15,DT$SEX,mean))
)
system.time(replicate(1000,DT[,mean(pwgtp15),by=SEX]))
system.time(replicate(1000,sapply(split(DT$pwgtp15,DT$SEX),mean)))
system.time(replicate(1000,rowMeans(DT)[DT$SEX==2]))
system.time(replicate(1000,mean(DT[DT$SEX==2,]$pwgtp15)))
mean(DT$pwgtp15,by=DT$SEX)
tapply(DT$pwgtp15,DT$SEX,mean)
DT[,mean(pwgtp15),by=SEX]
sapply(split(DT$pwgtp15,DT$SEX),mean)
system.time(replicate(1000,mean(DT[DT$SEX==2,]$pwgtp15)))
system.time(replicate(1000,sapply(split(DT$pwgtp15,DT$SEX),mean)))
system.time(replicate(1000,tapply(DT$pwgtp15,DT$SEX,mean)))
install.packages("RSQLServer")
library("RSQLServer", lib.loc="~/R/win-library/3.2")
install.packages("RMySQL")
ucscDb <- dbConnect(MySQL(), user="genome")
library("RMySQL", lib.loc="~/R/win-library/3.2")
ucscDb <- dbConnect(MySQL(), user="genome")
ucscDb <- dbConnect(MySQL(), user="genome", host='genome-mysql.cse.ucsc.edu')
result <- dbGetQuery(ucscDb, 'show databases;'); dbDisconnect(ucscDb);
hg19 <- dbConnect(MySQL(), user='genome', db='hg19, host='genome-mysql.cse.ucsc.edu')
hg19 <- dbConnect(MySQL(), user='genome', db='hg19', host='genome-mysql.cse.ucsc.edu')
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbDisconnect(hg19)
?nchar
fwf <- read.fwf('https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for')
fwf <- read.fwf('https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for', header = TRUE, sep='\t')
stuff <- read.table('https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for')
fwf <- read.fwf('https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for', skip = 3, header = TRUE, widths = c(7, -5, 4, 4, -5, 4, 4, -5, 4, 4))
fwf <- read.fwf('https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for', widths = c(7, -5, 4, 4, -5, 4, 4, -5, 4, 4, -5, 4, 4))
View(fwf)
fwf <- read.fwf('https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for', widths = c(7, -5, 4, 4, -5, 4, 4, -5, 4, 4, -5, 4, 4), skip = 4)
View(fwf)
sum(fwf[,4])
fwf <- read.fwf('https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for', widths = c(9, -5, 4, 4, -5, 4, 4, -5, 4, 4, -5, 4, 4), skip = 4)
View(fwf)
fwf <- read.fwf('https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for', widths = c(10, -5, 4, 4, -5, 4, 4, -5, 4, 4, -5, 4, 4), skip = 4)
View(fwf)
sum(fwf[,4])
?readLines
web <- readLines('http://biostat.jhsph.edu/~jleek/contact.html')
?nchar
nchar(web[1])
nchar(web[10])
nchar(web[20])
nchar(web[30])
nchar(web[100])
rm(list=ls())
cardiff <- read.table('A:\Raw_Data\Cardiff\CardiffExtract\cardiff_may_result_sets.txt')
cardiff <- read.table('A:/Raw_Data/Cardiff/CardiffExtract/cardiff_may_result_sets.txt')
View(cardiff)
rm(list = ls())
library(swirl)
library("swirl", lib.loc="~/R/win-library/3.2")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path = path2csv, stringsAsFactors = FALSE)
?read.csv
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -(5:20))
select(cran, -5:20)
select(cran, -(x:size))
select(cran, -(X:size))
-5:20
select(cran, -(5:20))
-(5:20)
select(cran, -(5:20))
select(cran, -(X:size))
filter(cran, package=="swirl")
select(cran, r_version=="3.1.1", country=="US")
select(cran, r_version == "3.1.1", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "IN" | country == "US")
filter(cran, size > 100500)
filter(cran, size > 100500, r_os == 'linux-gnu')
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, r_version == !is.na())
filter(cran, r_version == !is.na(cran(,r_version))
)
filter(cran, !r_version == is.na)
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id
)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb= size/2^20)
mutate(cran3, size_mb= size/2^20, siz_gb = size_mb/2^20)
mutate(cran3, size_mb= size/2^20, size_gb = size_mb/2^20)
mutate(cran3, size_mb= size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean (size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
source('C:/Temp/RtmpWgUqXc/summarize1.R')
submit()
pack_sum
quantile(pack_sum$sum$count, probs = 0.99)
quantile(pack_sumcount, probs = 0.99)
quantile(pack_sum$count, probs = 0.99)
filter(by_package, count >679)
filter(by_package, count > 679)
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
tou_counts
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count
)
top_counts
top_counts_sorted <- arrange(top_counts, desc(count))
view(top_counts_sorted)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(top_counts_sorted, unique > 465)
top_unique <- filter(pack_sum), unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, ip_id)
top_unique_sorted <- arrange(top_unique, desc(unique)
)
View(top_unique_sorted)
submit()
submit()
submit()
View()
View(result3)
submit()
submit()
source('C:/Temp/RtmpWgUqXc/chain1.R')
submit()
source('C:/Temp/RtmpWgUqXc/chain2.R')
submit()
source('C:/Temp/RtmpWgUqXc/chain2.R')
submit()
source('C:/Temp/RtmpWgUqXc/chain3.R')
submit()
source('C:/Temp/RtmpWgUqXc/chain4.R')
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
swirl()
library(swirl)
swirl()
students2
?gather
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?seperate
?separate
seperate(res, sex_class, c("sex", "class"), sep = "_")
separate(res, sex_class, c("sex", "class"), sep = "_")
separate(res, sex_class, c("sex", "class"))
source('C:/Temp/RtmpKqPuXP/script1.R')
submit()
students3
?gather
submit()
source('C:/Temp/RtmpKqPuXP/script2.R')
submit()
source('C:/Temp/RtmpKqPuXP/script2.R')
source('C:/Temp/RtmpKqPuXP/script2.R')
source('C:/Temp/RtmpKqPuXP/script2.R')
source('C:/Temp/RtmpKqPuXP/script2.R')
source('C:/Temp/RtmpKqPuXP/script2.R')
source('C:/Temp/RtmpKqPuXP/script2.R')
source('C:/Temp/RtmpKqPuXP/script2.R')
source('C:/Temp/RtmpKqPuXP/script2.R')
source('C:/Temp/RtmpKqPuXP/script2.R')
source('C:/Temp/RtmpKqPuXP/script2.R')
submit()
?spread
source('C:/Temp/RtmpKqPuXP/script3.R')
submit()
source('C:/Temp/RtmpKqPuXP/script3.R')
source('C:/Temp/RtmpKqPuXP/script3.R')
source('C:/Temp/RtmpKqPuXP/script3.R')
source('C:/Temp/RtmpKqPuXP/script3.R')
submit()
extract_numeric("class5")
source('C:/Temp/RtmpKqPuXP/script4.R')
submit()
source('C:/Temp/RtmpKqPuXP/script4.R')
source('C:/Temp/RtmpKqPuXP/script4.R')
submit()
?mutate
source('C:/Temp/RtmpKqPuXP/script4.R')
source('C:/Temp/RtmpKqPuXP/script4.R')
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = extract_numeric(class))
print
source('C:/Temp/RtmpKqPuXP/script4.R')
submit()
students4
source('C:/Temp/RtmpKqPuXP/script5.R')
submit()
?unique
source('C:/Temp/RtmpKqPuXP/script6.R')
submit()
source('C:/Temp/RtmpKqPuXP/script7.R')
submit()
passed
failed
passed <- mutate(status = passed)
?mutate
passed <- mutate(passed, status = passed)
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
?separate
source('C:/Temp/RtmpKqPuXP/script8.R')
source('C:/Temp/RtmpKqPuXP/script8.R')
submit()
source('C:/Temp/RtmpKqPuXP/script9.R')
submit()
source('C:/Temp/RtmpKqPuXP/script9.R')
submit()
swirl()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
dmy("March 12, 1975")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dtl
dt1
ymd_hms(dt1)
?hms
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, hours = 16, minutes = 44, seconds = 55)
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
?now
now(tzone = "America/New_York")
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc +days(")")
depart <- nyc +days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- withtz(arrive, tzone = "Asia/Hong_Kong")
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tzone = "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
cc <- "A:\Raw_Data\ImperialData\SUSCC.txt"
cc <- "A:/Raw_Data/ImperialData/SUSCC.txt"
read.table(cc, nrows = 10)
?read.table
read.table(cc, skip = 10, nrows = 10)
read.table(cc, skip = 100, nrows = 10)
read.table(cc, skip = 1, nrows = 1)
read.table(cc, nrows = 1)
rm(list=ls())
load("https://github.com/V-Alien/ExData_Plotting1/blob/master/data_ex1.Rda", data_ex1)
load("https://github.com/V-Alien/ExData_Plotting1/blob/master/data_ex1.Rda", "data_ex1")
library(dplyr)
setwd("C:/Users/Vishal/Dropbox/Coursera/ExData_Plotting1")
data_ex1 <- read.table("household_power_consumption.txt", sep = ";", header = TRUE, stringsAsFactors = FALSE, na.strings = '?')
# joining date with time
data_ex1$Date <- as.POSIXct(paste(data_ex1$Date, data_ex1$Time), format = "%d/%m/%Y %H:%M:%S")
data_ex1 <- data_ex1 %>% subset(Date >= "2007-02-01") %>% subset(Date < "2007-02-03")
save(data_ex1, file="data_ex1.Rda")
load("data_ex1.Rda")
hist(data_ex1$Global_active_power, main = "Global Active Power", xlab = "Global Active Power (kilowatts)",
ylab = "Frequency", col = 'red')
dev.copy(png, 'plot1.png', width = 480, height = 480)
dev.off()
source('C:/Users/Vishal/Dropbox/Coursera/ExData_Plotting1/base_file.R')
#plot 1.R
load("data_ex1.Rda")
hist(data_ex1$Global_active_power, main = "Global Active Power", xlab = "Global Active Power (kilowatts)",
ylab = "Frequency", col = 'red')
dev.copy(png, 'plot1.png', width = 480, height = 480)
dev.off()
#plot2.R
with(data_ex1, plot(Date, Global_active_power, xlab = "", ylab = "Global Active Power (kilowatts)", type = "n"))
with(data_ex1,lines(Date, Global_active_power))
dev.copy(png, 'plot2.png', width = 480, height = 480)
dev.off()
#plot3.R
with(data_ex1, plot(Date, Sub_metering_1, xlab = "", ylab = "Energy sub metering", type = "n"))
with(data_ex1, lines(Date, Sub_metering_1, col = 'black'))
with(data_ex1, lines(Date, Sub_metering_2, col = 'red'))
with(data_ex1, lines(Date, Sub_metering_3, col = 'blue'))
legend("topright", lty = c(1,1), col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.copy(png, 'plot3.png', width = 480, height = 480)
dev.off()
# plot4.R
par(mfrow = c(2,2), mar = c(4, 4, 1, 1))
with(data_ex1, plot(Date, Global_active_power, xlab = "", ylab = "Global Active Power (kilowatts)", type = "n"))
with(data_ex1,lines(Date, Global_active_power))
with(data_ex1, plot(Date, Voltage, xlab = "", ylab = "Voltage)", type = "n"))
with(data_ex1,lines(Date, Voltage))
with(data_ex1, plot(Date, Sub_metering_1, xlab = "", ylab = "Energy sub metering", type = "n"))
with(data_ex1, lines(Date, Sub_metering_1, col = 'black'))
with(data_ex1, lines(Date, Sub_metering_2, col = 'red'))
with(data_ex1, lines(Date, Sub_metering_3, col = 'blue'))
legend("topright", lty = c(1,1), col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
with(data_ex1, plot(Date, Global_reactive_power, xlab = "", ylab = "Global_reactive_power", type = "n"))
with(data_ex1,lines(Date, Global_reactive_power))
dev.copy(png, 'plot4.png', width = 480, height = 480)
dev.off()
